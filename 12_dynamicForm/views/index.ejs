<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>12_dynamicForm</title>
    <!-- jquery cdn -->
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>Dynamic Form 연습하기!</h1>
    <!-- 이름, 성별 입력받는 form 만들기 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" id="name" name="name" value="짜앙구" />

      <br />

      성별
      <input type="radio" name="gender" value="m" id="male" checked />
      <label for="male">남</label>
      <input type="radio" name="gender" value="F" id="female" />
      <label for="female">여</label>
      <br />

      <button type="button" onclick="ajaxGet();">Ajax Get 제출</button>
      <button type="button" onclick="ajaxPost();">Ajax Post 제출</button>

      <button type="button" onclick="axiosGet();">Axios Get 제출</button>
      <button type="button" onclick="axiosPost();">Axios Post 제출</button>

      <button type="button" onclick="fetchGet();">Fetch Get 제출</button>
      <button type="button" onclick="fetchPost();">Fetch Post 제출</button>
    </form>
    <!-- 동적폼 전송 결과를 보여줄 곳 -->
    <div class="rst"></div>
    <script>
      //frontend JS code
      const rst = document.querySelector(".rst");
      //form 선택
      const form = document.forms["register"];

      //form 객체 요소 확인
      console.dir(form); //DOM JS 객체의 전체 표현을 보려고 할 때 유용
      console.dir(form.name);
      console.dir(form.gender);
      console.dir(form.name.value); //이름 input에 입력한 값
      console.dir(form.gender.value); //성별 radio input을 선택한 값

      //요청에 실어서 보낼 데이터 변수(서버에서 받을 정보)
      const data = {
        //서버에 보낼 데이터
        name: form.name.value,
        gender: form.gender.value,
      };

      function ajaxGet() {
        console.log("ajaxGet 함수 호출!");

        // Ajax로 서버에 Get요청 보내기
        $.ajax({
          type: "get", //요청 종류 =form의 method
          url: "/ajax", //요청 경로 =form의 action
          data: data, //요청에 실어보낼 데이터(서버가 받게 될 데이터)
          success: function (data) {
            // 요청 성공 시 실행 함수
            // req.query에서 받아온 data
            console.log(data);
            rst.innerText = `GET /ajax 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;
          },
        });
      }

      // Ajax로 서버에 Post요청 보내기
      function ajaxPost() {
        console.log("ajaxPost 함수 호출!");
        $.ajax({
          type: "post",
          url: "/ajax",
          data: data,
          success: function (data) {
            rst.innerText = `POST /ajax 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;
            // document.body.style.backgroundColor = "blue";
            // document.body.style.color = "whitesmoke";
          },
        });
      }

      function axiosGet() {
        console.log("axiosGet 함수 호출");
        axios({
          //axios 요청의 결과는 Promise 객체
          //  => then, catch 메소드로 체이닝 가능
          //  => async, await도 사용 가능
          method: "get", //요청 방식 =form의 method
          url: "/axios", //요청 경로 =form의 action
          // params 키를 사용하지 않고 query string을 직접 정의해서 요청을 보낼 수도 있음(위와 동일 코드)
          //   url: `/axios?name=${form.name.value}&gender={form.name.value}`,
          params: data, //서버로 보낼 데이터 (query string)
        });
      }
      // .then(function (response) {
      //   console.log(response); //서버의 응답 결과
      //   console.log(response.data); //서버의 응답 데이터
      //   // rst.innerText = `GET /axios 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;
      //   // 퀴즈: 객체 구조분해
      //   const { name, gender } = data;
      //   rst.innerText = `GET /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
      // })
      // .catch(function (error) {
      //   console.log("err: ", error);
      // });

      // 퀴즈: 위 코드 async-await로 변경
      //   오답
      //   async function exec() {
      //     try {
      //       await axiosGet();
      //       await function () {
      //         const { name, gender } = data;
      //         rst.innerText = `GET /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
      //       };
      //     } catch {
      //       await function (error) {
      //         console.log("err: ", error);
      //       };
      //     }
      //   }
      //   exec();

      async function axiosGet() {
        console.log("axiosGet 함수 호출");
        try {
          const response = await axios({
            method: "get",
            url: "/axios",
            params: data,
          });
          console.log(response.data);
          const { name, gender } = data;
          rst.innerText = `GET /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
        } catch (err) {
          console.log("error", err);
        }
      }
      //   function axiosPost() {
      //     console.log("axiosPost 함수 호출");
      //     axios({
      //       method: "post",
      //       url: "/axios",
      //       data: data,
      //     }).then(function (response) {
      //       console.log(response);
      //       const { name, gender } = data;
      //       rst.innerText = `POST /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
      //     });
      //   }
      //퀴즈: 위 코드 async-await로 변경
      async function axiosPost() {
        console.log("axiosPost 함수 호출");
        try {
          const response = await axios({
            method: "post",
            url: "/axios",
            data: data,
          });
          console.log(response.data);
          const { name, gender } = data;
          rst.innerText = `POST /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
        } catch (err) {
          console.log("err", err);
        }
      }

      //fetch(url, options)
      function fetchGet() {
        console.log("fetchGet 함수 호출");
        const form = document.forms["register"];

        //fetch는 dafault로 get 방식 작동. options 생략 가능
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then(function (response) {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터 전달받음. 응답(response) 객체는 json() 메서드 제공
            // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 JS obj로 변환
          })
          .then(function (data) {
            //data: 직전 then 메서드의 반환값
            console.log(data);
            const { name, gender } = data;
            rst.innerText = `POST /axios 요청 완료! ${name}님은 ${gender}이시죠?`;
          });
      }
      function fetchPost() {
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        //fetch를 통해 post 요청 시 option 객체 반드시 필요
        //1. method 키 post 지정
        //2. headers 키 JSON 포맷 사용 선언
        //3. body 키 서버로 보낼 데이터
        fetch("/fetch", {
          method: "POST",
          header: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
          //data: js obj
          //JSON.stringify(data) : js obj => json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then(function (response) {
            // 왜 get과 달리 인자를 data로 하면 undefiend인지,
            // fetch url이 get과 post가 다른 이유
            console.log(data);
            rst.innerText = `POST /fetch 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;
          });
      }
    </script>
  </body>
</html>
